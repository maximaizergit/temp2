      Оглавление
      1.	Дайте описание истории создания HTML. Опишите принципы работы HTML-редакторов.	5
      2.	Назовите структуру HTML-документа и его основные теги.	5
      3.	Назовите основные теги форматирования в HTML. Раскройте сущность физического и логического форматирования.	6
      4.	Назовите виды и процесс создания ссылок в языке HTML. Опишите работу с абсолютными и относительными ссылками. Опишите создание ссылок на документы и файлы. Опишите, что такое внутренние ссылки?	6
      5.	Опишите процесс работы со шрифтами во время вёрстки. Как происходит интеграция графики и медиаконтента в веб-страницу.	7
      6.	Перечислите и опишите виды и способы создания списков в языке HTML.	8
      7.	Опишите, каким образом происходит создание таблиц в языке HTML.	9
      8.	Перечислите и опишите принципы создания и использования форм в языке HTML.	10
      9.	Дайте понятие определению таблицы стилей. Опишите виды таблиц стилей и их процесс создания.	11
      10.	Опишите, каким образом  происходит внедрение таблиц стилей в HTML-файл? Опишите использование встроенных стилей. Назовите правила каскадирования.	12
      11.	Дайте определение понятию CSS. Назовите его назначение и особенности использования. Назовите и опишите принципы создания и использования таблиц стилей, правил каскадирования. Назовите основные свойства CSS и за что они отвечают.	13
      12.	Дайте определение понятию блочная модель CSS. Опишите использование CSS для макетирования. Опишите термины «Нормальный поток» и блочная модель документа. Опишите стандартные стили браузеров и способы их сброса.	14
      13.	Охарактеризуйте процесс использования CSS для создания адаптивных HTML-страниц, а также кроссбраузерное использование CSS. Назовите способы позиционирования и обтекания объектов на странице.	15
      14.	Назовите виды визуальных эффектов CSS. Опишите процесс создания анимации средствами CSS.	15
      15.	Дайте определения терминам серверные и клиентские сценарии. Объясните, что такое языки разработки сценариев. Опишите механизм обработки событий с использованием DHTML.	16
      16.	Опишите синтаксис языка разработки сценариев JavaScript. Назовите способы внедрения сценариев в HTML-документ.	17
      17.	Охарактеризуйте массивы и методы работы с массивами в JavaScript. Назовите особенности использования основных методов работы с массивами в JavaScript.	17
      18.	Опишите процесс создания пользовательских функций в JavaScript. Объясните термины область видимости переменных и замыкания.	18
      19.	Опишите процесс создания пользовательских функций в JavaScript. Назовите особенности синтаксиса определения и использования функций в JavaScript.	19
      20.	Дайте определение понятиям объекты и методы в JavaScript. Назовите контекст this и способы определения вызова контекста. Назовите назначение и особенности использования основных стандартных объектов в JavaScript.	20
      21.	Охарактеризуйте сущность класса в JavaScript. Опишите тело класса и задание методов. Дайте определение терминам наследование и прототипы.	21
      22.	Объясните термин объектная модель браузера (BOM). Опишите процесс использования объектов HTML и объектной модели документа (DOM).	21
      23.	Опишите термин событие. Дайте классификацию событий на странице. Опишите использование событий на странице. Опишите процесс всплытия и перехвата событий, способы отмены действий «по умолчанию».	22
      24.	Опишите сущность события. Назовите типы и стадии событий. Назовите способы задания обработчиков событий. Опишите использование событий.	22
      25.	Опишите формы и процесс обработки данных формы средствами JavaScript. Назовите особенности работы с сенсорными устройствами.	23
      26.	Дайте определение понятию регулярные выражения. Опишите сущность и назначение регулярного выражения. Назовите способы создания регулярных выражений.	24
      27.	Опишите библиотеку JQuery. Назовите преимущества использования библиотеки JQuery. Опишите синтаксис команд, селекторов JQuery и особенности обработки событий.	24
      28.	Дайте определение понятию формат JSON. Назовите способы обработки данных в клиентских приложениях. Опишите различные подходы к взаимодействию с сервером.	25
      29.	Дайте определение понятию формат JSON. Назовите способы обработки данных в клиентских приложениях. Опишите обработку данных в формате JSON в сценариях на языке JavaScript.	25
      30.	Дайте определение понятию технология AJAX. Опишите объект XMLHttpRequest: его назначение, методы и свойства.	26
      31.	Дайте определение понятию технология AJAX: его сущность, назначение и принцип работы. Объясните, как происходит организация взаимодействия с сервером с использованием технологии AJAX.	27
      32.	Дайте определение понятию серверный язык сценариев PHP. Опишите, как происходит установка и настройка веб-сервера и PHP. Опишите основы синтаксиса PHP. Назовите назначение протокола HTTP и его методов.	27
      33.	Дайте определение понятию серверный язык сценариев PHP. Назовите понятие, назначение и принципы работы WEB-сервера Apache. Опишите элементы структуры программ PHP и основные элементы синтаксиса.	28
      34.	Дайте определение понятию серверный язык сценариев PHP. Назовите особенности определения и использования функций в PHP.	28
      35.	Дайте определение понятию массив в PHP. Назовите функции для работы с массивами и строками. Опишите использование стандартных функций для работы с массивами и строками.	29
      36.	Дайте определение понятию серверный язык сценариев PHP. Назовите стандартные функции PHP для работы с файловой структурой и управления временем.	31
      37.	Дайте определение понятию cookie. Как происходит управление кэшированием, буферизация и хэширование. Опишите метод HEAD. Назовите назначение буферизации и хэширования.	32
      38.	Дайте определение понятиям cookie и HTTP-аутентификация. Как происходит управление сессиями. Назовите особенности управления сессиями в PHP.	33
      39.	Дайте определение понятию протокол OAuth: его аутентификация и авторизация пользователей. Опишите основы работы с почтовым сервисом.	34
      40.	Опишите, в чем состоит опасность SQL-инъекций. Как достичь безопасности web-приложения. Назовите методы ее повышения/достижения.	34
      41.	Объясните, как происходит авторизация через социальные сети средствами PHP. Опишите использование одной отдельной социальной сети.	35
      42.	Опишите, как происходит генерация ссылок аутентификации. Опишите процесс использования нескольких социальных сетей.	36
      43.	Опишите процесс использования БД для аутентификации через социальные сети средствами PHP. Охарактеризуйте работу с данными пользователя.	37
      44.	Дайте определение понятию регистрация пользователей средствами PHP. Опишите расширение возможностей PHP, путем подключения дополнительных модулей.	38
      45.	Объясните, как происходит организация работы с почтовыми сервисами в PHP. Назовите отличие библиотеки PHPMailer и функции mail().	38
      46.	Объясните, как происходит отправка электронных писем с помощью PHPMailer. Назовите функции библиотеки PHPMailer.	39
      47.	Охарактеризуйте процесс отправки электронного письма с вложением, с помощью PHPMailer. Опишите использование функции mail().	39
      48.	Опишите процесс отправки писем на PHP через SMTP. Объясните принцип работы протокола SMTP.	40
      49.	Опишите как происходит использование библиотеки ApMailer. Охарактеризуйте процесс подключения и инициализации библиотеки ApMailer.	40
      50.	Опишите суть организации рассылок PHP. Назовите методы реализации рассылок.	41
      51.	Дайте определение понятию автоответчики. Назовите методы реализации автоответчиков.	42
      52.	Опишите процесс подключения БД MySql. Опишите суть использования PHP и MySQL в проекте.	42
      53.	Назовите базовые функции MySql. Опишите процесс формирования и выполнения запросов к БД в PHP.	43
      54.	Назовите основные виды запросов MySql. Определите главную функцию PHP для работы с MySQL.	44
      55.	Дайте определение понятию CURL. Дайте описание библиотеки. Назовите функции библиотеки. Опишите функции.	44
      56.	Дайте определение понятию CURL. Опишите базовую структуру. Назовите этапы создания и использования запросов.	45
      57.	Дайте определение понятию CURL. Назовите используемые протоколы. Назовите варианты применения и их описание.	45
      58.	Дайте определение понятию сценарии PHP. Объясните суть использование простых сценариев. Назовите методы создания сценариев.	46
      59.	Объясните суть использования PHP сценариев в HTML-документе. Объясните суть использования сценариев при работе с БД.	46
      60.	Дайте определение понятию AJAX. Опишите способы организации взаимодействия с сервером посредством технологии AJAX. Назовите методы AJAX.	47
      





      1. Дайте описание истории создания HTML. Опишите принципы работы HTML-редакторов.
      HTML был разработан британским учёным Тимом Бернерсом-Ли приблизительно в 1986 — 1991 годах в стенах ЦЕРНа в Женеве в Швейцарии. HTML создавался как язык для обмена научной и технической документацией, пригодный для использования людьми, не являющимися специалистами в области вёрстки. HTML успешно справлялся с проблемой сложности SGML путём определения небольшого набора структурных и семантических элементов — дескрипторов. Дескрипторы также часто называют «тегами». С помощью HTML можно легко создать относительно простой, но красиво оформленный документ. Помимо упрощения структуры документа, в HTML внесена поддержка гипертекста. Мультимедийные возможности были добавлены позже.
      HTML-редакторы являются специализированным программным обеспечением, а значит, предоставляют ряд удобств для написания HTML-разметки. Например, подстановку или целые шаблоны страниц, подсветку синтаксиса. WYSIWYG-ответвления могут работать как конструктор сайтов. Каждый редактор эксклюзивен и имеет ряд своих особенностей, достоинств и недостатков. Для верстальщика текстовый редактор (HTML-редактор) — это основной рабочий инструмент. Для современных редакторов важны инструменты ускорения и автоматизации написания кода, ведь от редактора кода зависит продуктивность. Такими средствами становятся плагины вроде emmet; несколько кареток в Sublime Text; и автодополнение кода, подсветка синтаксиса. Для использования WYSIWYG-редактора нет необходимости знать HTML. Без знаний можно полноценно пользоваться разметкой: размечать абзацы, заголовки, картинки или таблицы, при этом сразу глядя на то, что будет в итоге.
      
      2. Назовите структуру HTML-документа и его основные теги.
      HTML-документ имеет определенную структуру, которая состоит из нескольких основных тегов:
      <!DOCTYPE>: Этот тег указывает тип документа и версию HTML. В HTML5 это <!DOCTYPE html>.
      <html>: Этот тег определяет начало и окончание HTML-документа.
      <head>: Этот тег содержит метаданные, которые не отображаются на веб-странице. Он также может содержать ссылки на стилевые листы и скрипты.
      <body>: Этот тег содержит все содержимое веб-страницы, которое видит пользователь, такое как текст, изображения, видео, игры, аудиозаписи и т.д.
      Внутри этих основных тегов можно использовать множество других тегов для форматирования и структурирования контента. Например, <p> для абзацев, <h1> до <h6> для заголовков различного уровня, <a> для ссылок, <img> для изображений и так далее.
      Веб-страницы обычно состоят из аналогичных стандартных компонентов, таких как заголовок, навигационное меню, основное содержимое, боковая панель, нижний колонтитул. Эти компоненты могут быть структурированы и стилизованы с помощью HTML и CSS.
      
      3. Назовите основные теги форматирования в HTML. Раскройте сущность физического и логического форматирования.
      Основные теги форматирования в HTML включают следующие:
      <h1> до <h6>: Эти теги используются для структурирования HTML заголовков. В HTML используются 6 уровней заголовков, от <h1> до <h6><h1> используется для обозначения самого важного, а <h6> наименее важного заголовков.
      <b> и <strong>: Эти теги задают полужирное начертание шрифта.
      <i> и <em>: Эти теги задают курсивное начертание шрифта.
      <pre>: Этот тег используется для включения в HTML-документ предварительно отформатированного текста.
      <mark>: Этот тег определяет выделенный / подсвеченный текст.
      Теги форматирования делятся на две категории: теги физической разметки и теги логической разметки.
      Физическое форматирование отвечает за стилевое оформление (жирное начертание, курсив, шрифт и т.д.) текста. Теги физического форматирования прямо указывают на то, какие свойства шрифта следует изменить.
      Логическое форматирование несет смысловую нагрузку. Теги логического форматирования указывают, какой это текст (например, важный). Они дают понять поисковым системам, по каким словам необходимо ранжировать веб-страницу.
      Например, тег <b> является тегом физической разметки, и выделяет текст без акцента на его важность. Тег <strong> же определяет текст, которому придают особую важность. Содержимое тега имеет большой вес для поисковиков, а устройства, считывающие с экрана, выделяют его определенной интонацией.
      
      4. Назовите виды и процесс создания ссылок в языке HTML. Опишите работу с абсолютными и относительными ссылками. Опишите создание ссылок на документы и файлы. Опишите, что такое внутренние ссылки?
      В HTML существуют различные виды ссылок и процессы их создания:
      Обычные ссылки: Создаются с помощью тега <a> и атрибута href, который указывает URL-адрес, на который будет происходить переход при клике. Например: <a href="https://example.com">Это ссылка</a>.
      Ссылки-изображения: Можно использовать изображение в качестве ссылки, обернув тег <img> в тег <a>. Например: <a href="https://example.com"><img src="image.jpg" alt="Описание"></a>.
      Внутренние ссылки (якорные ссылки): Они организуют переходы внутри одного HTML-документа. Для создания внутренней ссылки необходимо сначала создать якорь в нужном месте документа с помощью атрибута id. Затем создается ссылка, в которой в атрибуте href указывается # и имя якоря. Например: <div id="section1">Секция 1</div> ... <a href="#section1">Перейти к Секции 1</a>.
      Также важно различать абсолютные и относительные ссылки67:
      Абсолютные ссылки указывают полный URL-адрес ресурса. Они начинаются с указания протокола (обычно http:// или https://) и содержат имя сайта. Например: <a href="https://example.com/page.html">Ссылка</a>.
      Относительные ссылки ведут отсчет от текущего документа или корня сайта. Они не включают имя сайта или протокол. Например, если текущий документ находится по адресу https://example.com/folder1/page1.html, то относительная ссылка <a href="page2.html">Ссылка</a> будет указывать на https://example.com/folder1/page2.html.
      Создание ссылок на документы и файлы в HTML осуществляется также с помощью тега <a> и атрибута href. В качестве значения href указывается путь к файлу или документу. Если веб-браузер не знает, как отображать или обрабатывать файл, он предложит пользователю открыть файл в соответствующем приложении или загрузить файл.
      
      5. Опишите процесс работы со шрифтами во время вёрстки. Как происходит интеграция графики и медиаконтента в веб-страницу.
      Процесс работы со шрифтами во время вёрстки включает в себя несколько ключевых этапов:
      Выбор шрифта: Важно выбрать правильный шрифт, который будет соответствовать общему стилю и тону веб-страницы. Это может быть системный шрифт или пользовательский шрифт, загруженный с помощью CSS-правила @font-face.
      Размер и стиль шрифта: С помощью CSS можно управлять размером шрифта (font-size), стилем (font-style), весом (font-weight) и другими свойствами шрифта.
      Кросс-браузерная совместимость: Не все шрифты поддерживаются всеми браузерами. Важно убедиться, что выбранный шрифт отображается корректно во всех целевых браузерах.
      Что касается интеграции графики и медиаконтента в веб-страницу, это обычно происходит следующим образом:
      Графика: Графические элементы, такие как изображения и иконки, можно добавить на веб-страницу с помощью элемента <img> или CSS-свойства background-image.
      Видео и аудио: Медиаконтент, такой как видео и аудио, можно встроить на веб-страницу с помощью элементов <video> и <audio>.
      Анимация: С помощью CSS и JavaScript можно создавать сложные анимации и интерактивные элементы.
      Адаптивный дизайн: Важно убедиться, что все медиаэлементы корректно отображаются на различных устройствах и разрешениях экрана.
      Оптимизация: Для улучшения производительности веб-страницы графика и медиаконтент должны быть оптимизированы, чтобы уменьшить время загрузки страницы. Это может включать в себя сжатие файлов, ленивую загрузку и использование CDN для быстрой доставки контента.
      
      6. Перечислите и опишите виды и способы создания списков в языке HTML.
      В HTML есть три основных типа списков:
      Упорядоченные списки (<ol>): Это списки, в которых каждый элемент списка (<li>) автоматически пронумерован браузером. Например:
      HTML
      <ol>
          <li>Первый элемент</li>
          <li>Второй элемент</li>
      </ol>
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Неупорядоченные списки (<ul>): В этих списках элементы списка (<li>) обычно отмечаются маркерами. Например:
      HTML
      <ul>
          <li>Первый элемент</li>
          <li>Второй элемент</li>
      </ul>
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Списки определений (<dl>): Эти списки состоят из пар терминов и определений. Термины обозначаются тегом <dt>, а определения - тегом <dd>. Например:
      HTML
      <dl>
          <dt>HTML</dt>
          <dd>Язык разметки гипертекста</dd>
          <dt>CSS</dt>
          <dd>Каскадные таблицы стилей</dd>
      </dl>
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Все эти списки можно вкладывать друг в друга для создания более сложных структур. Кроме того, с помощью CSS можно настроить внешний вид списков, изменяя маркеры списка, отступы и другие свойства.
      
      7. Опишите, каким образом происходит создание таблиц в языке HTML.
      Создание таблиц в HTML происходит с помощью специальных тегов. Вот основные из них:
      <table>: Этот тег используется для создания самой таблицы. Все остальные теги таблицы должны быть вложены внутрь этого тега.
      <tr>: Тег для создания строки таблицы. Каждая строка таблицы начинается с этого тега.
      <td>: Тег для создания ячейки таблицы. Этот тег используется внутри тега <tr> для добавления ячеек или столбцов в строку.
      <th>: Тег для создания заголовочной ячейки таблицы. Он используется подобно тегу <td>, но делает текст в ячейке жирным и центрирует его.
      <thead>, <tbody>, <tfoot>: Эти теги используются для группировки заголовков, основного содержимого и подвала таблицы соответственно.
      Вот пример таблицы в HTML:
      HTML
      <table>
          <thead>
              <tr>
                  <th>Имя</th>
                  <th>Возраст</th>
              </tr>
          </thead>
          <tbody>
              <tr>
                  <td>Алексей</td>
                  <td>30</td>
              </tr>
              <tr>
                  <td>Мария</td>
                  <td>25</td>
              </tr>
          </tbody>
          <tfoot>
              <tr>
                  <td colspan="2">Всего: 2 человека</td>
              </tr>
          </tfoot>
      </table>
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      В этом примере создается таблица с двумя столбцами (“Имя” и “Возраст”) и двумя строками данных. В подвале таблицы выводится общее количество человек.
      С помощью CSS можно настроить внешний вид таблицы, изменяя такие параметры, как цвет фона, границы, отступы и т.д.
      
      8. Перечислите и опишите принципы создания и использования форм в языке HTML.
      Создание и использование форм в HTML основывается на нескольких ключевых принципах:
      <form>: Этот тег используется для создания формы. Все элементы формы должны быть вложены в этот тег.
      <input>: Этот тег используется для создания различных элементов ввода, таких как текстовые поля, радиокнопки, флажки и т.д. Тип элемента ввода определяется атрибутом type.
      <label>: Этот тег используется для добавления метки к элементу ввода. Метка связывается с элементом ввода с помощью атрибута for.
      <textarea>: Этот тег используется для создания многострочного текстового поля.
      <select> и <option>: Эти теги используются для создания выпадающего списка. Тег <select> создает сам список, а теги <option> определяют доступные варианты выбора.
      <button>: Этот тег используется для создания кнопок. Тип кнопки (например, кнопка отправки формы) определяется атрибутом type.
      Обработка формы: После заполнения формы пользователем данные формы обычно отправляются на сервер для обработки. Атрибуты action и method тега <form> определяют URL, на который отправляются данные, и метод HTTP, который используется для отправки данных (обычно POST или GET).
      Вот пример формы в HTML:
      HTML
      <form action="/submit" method="POST">
          <label for="name">Имя:</label>
          <input type="text" id="name" name="name">
          <label for="email">Email:</label>
          <input type="email" id="email" name="email">
          <input type="submit" value="Отправить">
      </form>
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      В этом примере создается форма с двумя текстовыми полями (для имени и электронной почты) и кнопкой отправки. После заполнения формы пользователем и нажатия кнопки “Отправить” данные формы отправляются на URL “/submit” с использованием метода HTTP POST.
      
      9. Дайте понятие определению таблицы стилей. Опишите виды таблиц стилей и их процесс создания.
      Таблица стилей - это набор правил, которые определяют внешний вид элементов на веб-странице. Они используются для управления макетом, цветами, шрифтами и другими аспектами представления контента. Самый распространенный язык для создания таблиц стилей - это каскадные таблицы стилей (CSS).
      Есть три основных типа таблиц стилей в CSS:
      Внешние таблицы стилей: Это отдельные файлы CSS, которые подключаются к HTML-документу с помощью элемента <link>. Это наиболее предпочтительный способ использования CSS, поскольку он обеспечивает лучшую организацию и повторное использование кода.
      Пример:
      HTML
      <link rel="stylesheet" type="text/css" href="styles.css">
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Внутренние таблицы стилей: Это блоки CSS, размещенные прямо в HTML-документе внутри элемента <style>. Они могут быть полезны для стилей, которые применимы только к одной странице.
      Пример:
      HTML
      <style>
      body {
          background-color: lightblue;
      }
      </style>
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Встроенные стили: Это стили, применяемые непосредственно к отдельным элементам с помощью атрибута style. Встроенные стили имеют наивысший приоритет, но их использование обычно не рекомендуется, поскольку они ухудшают поддерживаемость кода.
      Пример:
      HTML
      <p style="color: red;">Это красный текст.</p>
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Создание таблиц стилей включает в себя определение селекторов (которые указывают, к каким элементам применяются стили) и блоков деклараций (которые содержат одно или несколько свойств и их значения).
      Пример CSS-правила:
      CSS
      p {
          color: red;
          font-size: 16px;
      }
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      В этом примере селектор p означает, что стиль будет применяться ко всем параграфам, а декларации color: red; и font-size: 16px; задают цвет текста и размер шрифта соответственно.
      
      10. Опишите, каким образом происходит внедрение таблиц стилей в HTML-файл? Опишите использование встроенных стилей. Назовите правила каскадирования.
      Внедрение таблиц стилей в HTML-файл может происходить тремя основными способами:
      Внешние таблицы стилей: Для этого используется тег <link>, который помещается внутрь тега <head> HTML-документа. В атрибуте href указывается путь к CSS-файлу. Например:
      HTML
      <head>
          <link rel="stylesheet" type="text/css" href="styles.css">
      </head>
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Внутренние таблицы стилей: Для этого используется тег <style>, который также помещается внутрь тега <head>. Внутри тега <style> напрямую записываются CSS-правила. Например:
      HTML
      <head>
          <style>
              body {
                  background-color: lightblue;
              }
          </style>
      </head>
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Встроенные стили: Они применяются непосредственно к HTML-элементам с помощью атрибута style. Например:
      HTML
      <p style="color: red;">Это красный текст.</p>
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Встроенные стили имеют наивысший приоритет, но их использование обычно не рекомендуется, поскольку они ухудшают поддерживаемость кода и нарушают принцип разделения содержимого и представления.
      Правила каскадирования в CSS определяют, какой стиль будет применен, если найдено несколько конфликтующих CSS-правил. Они основываются на следующих принципах:
      Важность: Правила, помеченные директивой !important, имеют наивысший приоритет.
      Специфичность: Если важность правил одинакова, применяется правило с большей специфичностью. Специфичность зависит от типа селектора (id имеет большую специфичность, чем класс, а класс - большую, чем тег).
      Порядок источника: Если важность и специфичность правил одинаковы, применяется правило, которое было объявлено позже.
      
      11. Дайте определение понятию CSS. Назовите его назначение и особенности использования. Назовите и опишите принципы создания и использования таблиц стилей, правил каскадирования. Назовите основные свойства CSS и за что они отвечают.
      CSS (Cascading Style Sheets) - это язык стилей, используемый для описания внешнего вида документа, написанного на языке разметки, таком как HTML. CSS используется для определения стилей для веб-страниц, включая дизайн, макет и вариации в отображении для различных устройств и размеров экрана.
      Назначение CSS:
      Разделение содержимого и представления: CSS позволяет отделить содержимое HTML-документа от его внешнего вида, что упрощает поддержку сайта и повышает его доступность.
      Повторное использование кода: CSS-правила можно применять к нескольким элементам на веб-странице или на нескольких веб-страницах, что уменьшает дублирование кода.
      Управление макетом: CSS предоставляет мощные инструменты для управления макетом веб-страницы, включая позиционирование, выравнивание, отступы, границы и многое другое.
      Принципы создания и использования таблиц стилей:
      Селекторы: Определяют, к каким элементам применяются CSS-правила.
      Декларации: Определяют, какие стили применяются к выбранным элементам.
      Каскадирование: Определяет порядок применения стилей, когда на один и тот же элемент влияют несколько CSS-правил.
      Правила каскадирования:
      Важность: Правила, помеченные директивой !important, имеют наивысший приоритет.
      Специфичность: Если важность правил одинакова, применяется правило с большей специфичностью.
      Порядок источника: Если важность и специфичность правил одинаковы, применяется правило, которое было объявлено позже.
      Основные свойства CSS:
      color: Определяет цвет текста.
      background-color: Определяет цвет фона элемента.
      font-size: Определяет размер шрифта текста.
      font-family: Определяет семейство шрифтов для текста.
      width и height: Определяют ширину и высоту элемента соответственно.
      margin, padding, border: Определяют внешние и внутренние отступы и границы элемента.
      display: Определяет, как элемент отображается на странице.
      position: Определяет, как элемент позиционируется на странице.
      
      12. Дайте определение понятию блочная модель CSS. Опишите использование CSS для макетирования. Опишите термины «Нормальный поток» и блочная модель документа. Опишите стандартные стили браузеров и способы их сброса.
      Блочная модель CSS - это способ представления каждого элемента на веб-странице в виде прямоугольного блока, который состоит из четырех областей: содержимого, внутренних отступов, рамки и внешних отступов. Блочная модель определяет, как размеры, положение и отступы элементов вычисляются и влияют на расположение других элементов.
      CSS предоставляет различные значения свойства display, которые позволяют изменять тип отображения элементов, например, блочный, строчный, строчно-блочный, гибкий, сеточный и т.д. Эти значения влияют на то, как элементы участвуют в формировании макета страницы.
      Нормальный поток - это стандартный режим компоновки элементов в CSS, при котором блочные элементы располагаются друг под другом, а строчные элементы располагаются друг за другом в пределах одной строки. Нормальный поток можно изменить с помощью свойств, таких как position, float, clear и др.
      Блочная модель документа - это концепция, которая описывает, как элементы документа представляются в виде дерева блоков, каждый из которых имеет свои свойства, такие как размеры, положение, цвет, фон и т.д. Блочная модель документа определяет, как эти блоки взаимодействуют друг с другом и с окном браузера.
      Стандартные стили браузеров - это набор CSS-правил, которые браузер применяет к элементам документа по умолчанию, если не заданы другие стили. Стандартные стили браузеров могут отличаться в разных браузерах, поэтому для обеспечения единообразия внешнего вида страницы часто используются способы их сброса.
      Сброс стилей браузеров - это техника, которая позволяет убрать или переопределить стандартные стили браузеров для элементов документа. Существует несколько способов сброса стилей, например, использование специальных CSS-файлов, таких как reset.css или normalize.css, или применение универсального селектора (*) с нулевыми значениями для свойств, таких как margin, padding, border и т.д.
      
      13. Охарактеризуйте процесс использования CSS для создания адаптивных HTML-страниц, а также кроссбраузерное использование CSS. Назовите способы позиционирования и обтекания объектов на странице.
      Адаптивные HTML-страницы с использованием CSS:
      Адаптивный веб-дизайн использует CSS для создания веб-страниц, которые автоматически подстраиваются под различные размеры экрана и устройства. Это достигается с помощью медиазапросов, гибких сеток и масштабируемых изображений. Медиазапросы позволяют применять разные стили в зависимости от характеристик устройства, таких как ширина экрана. Гибкие сетки используются для создания макетов, которые могут автоматически масштабироваться в зависимости от размера экрана.
      Кроссбраузерное использование CSS:
      Кроссбраузерное тестирование обеспечивает совместимость веб-страницы или веб-приложения с различными браузерами. Это важно, поскольку разные браузеры могут по-разному интерпретировать и отображать CSS. Кроссбраузерное тестирование помогает обнаружить и исправить такие различия, чтобы обеспечить единообразный и надежный опыт для всех пользователей.
      Позиционирование и обтекание объектов на странице:
      В CSS существуют различные способы позиционирования элементов:
      static: Это значение по умолчанию. Элемент позиционируется в соответствии с его местом в потоке документа.
      relative: Элемент позиционируется относительно своего исходного положения в потоке документа.
      absolute: Элемент позиционируется относительно ближайшего родительского элемента, который имеет позиционирование, отличное от static.
      Обтекание элементов обычно контролируется с помощью свойства float, которое позволяет элементам “плавать” влево или вправо, при этом другие элементы обтекают их. Свойство clear используется для управления поведением элементов вокруг плавающих элементов.
      
      14. Назовите виды визуальных эффектов CSS. Опишите процесс создания анимации средствами CSS.
      В CSS существуют различные виды визуальных эффектов:
      Параллакс: Эффект, при котором фоновое изображение движется медленнее, чем содержимое переднего плана, создавая иллюзию глубины и объема.
      Ночной режим: Использует CSS-фильтры для быстрого переключения между светлой и темной темами.
      Смешивание цветов: Позволяет смешивать цвета и создавать различные визуальные эффекты.
      Липкий футер: Футер, который всегда “прилипает” к низу страницы.
      Увеличение изображений при наведении: Эффект, при котором изображение масштабируется при наведении курсора.
      3D-эффекты: Используются для создания объемных и реалистичных визуальных эффектов.
      Процесс создания анимации средствами CSS:
      Определение анимации: Создайте набор ключевых кадров с помощью директивы @keyframes, которая определяет состояния анимации в разные моменты времени.
      Применение анимации: Примените анимацию к элементу, добавив свойство animation к CSS-правилам этого элемента. Свойство animation может включать следующие параметры:
      animation-name: Имя @keyframes, которое определяет ключевые кадры анимации.
      animation-duration: Время, в течение которого должен пройти один цикл анимации.
      animation-timing-function: Функция, которая определяет скорость изменения анимации.
      animation-delay: Задержка между временем загрузки элемента и временем начала анимации.
      animation-iteration-count: Количество повторений анимации.
      animation-direction: Определяет, должна ли анимация повторяться в обратном порядке.
      animation-fill-mode: Определяет стили элемента до и после анимации.
      animation-play-state: Позволяет приостановить и возобновить анимацию.
      15. Дайте определения терминам серверные и клиентские сценарии. Объясните, что такое языки разработки сценариев. Опишите механизм обработки событий с использованием DHTML.
      Серверные сценарии - это код, который выполняется на веб-сервере перед отправкой страницы в браузер. Они задействуют сервер для обработки и имеют доступ ко всем ресурсам сервера, таким как базы данных и исполняемые файлы. Серверные сценарии создают коммуникационный канал между сервером и клиентом (пользователем).
      Клиентские сценарии выполняются на компьютере пользователя в процессе взаимодействия с веб-страницей. Они требуют, чтобы браузеры запускали сценарии на клиентском компьютере, но они не взаимодействуют с сервером при обработке клиентских сценариев.
      Языки разработки сценариев - это высокоуровневые языки программирования, которые используются для создания динамического поведения веб-страниц. Они характеризуются простотой использования, читабельностью и возможностью быстрого прототипирования. Некоторые популярные языки сценариев включают JavaScript, Python, Ruby, PHP и Lua.
      DHTML (Dynamic HTML) - это комбинация языков HTML, CSS и JavaScript, которая позволяет создавать интерактивные и динамические веб-страницы. В DHTML, JavaScript используется для обработки событий и взаимодействия с пользователями. Обработка событий в JavaScript происходит с помощью методов, таких как addEventListener(), которые позволяют привязывать обработчики событий к элементам HTML и выполнять определенные действия при возникновении событий.
      
      16. Опишите синтаксис языка разработки сценариев JavaScript. Назовите способы внедрения сценариев в HTML-документ.
      Синтаксис JavaScript:
      JavaScript - это легковесный, интерпретируемый или JIT-компилируемый, объектно-ориентированный язык с функциями первого класса. Он поддерживает объектно-ориентированный, императивный и декларативный (например, функциональное программирование) стили программирования. Исходный код ECMAScript скриптов сканируется слева направо и преобразуется в последовательность найденных элементов в токены, управляющие символы, окончания строк, комментарии или пробелы.
      Способы внедрения сценариев в HTML-документ:
      Сценарии обычно внедряются в HTML-документ тремя стандартными способами:
      В виде гиперссылки: Ссылка на внешний файл JavaScript, который загружается и выполняется браузером.
      В виде обработчика события: JavaScript-код внедряется непосредственно в HTML-элементы через атрибуты событий, такие как onclick или onload.
      В рамках элемента SCRIPT: JavaScript-код помещается внутрь тегов <script> и </script>, которые могут быть размещены в любом месте HTML-документа.
      
      17. Охарактеризуйте массивы и методы работы с массивами в JavaScript. Назовите особенности использования основных методов работы с массивами в JavaScript.
      Массивы в JavaScript - это особая структура данных, которая используется для хранения коллекции элементов. Массивы в JavaScript индексируются с нуля: первый элемент массива имеет индекс, равный 0, а индекс последнего элемента равен значению свойства массива length минус 1.
      В JavaScript предоставляется множество методов для работы с массивами. Вот некоторые из них:
      push(): Добавляет элементы в конец массива.
      pop(): Удаляет последний элемент массива.
      shift(): Удаляет первый элемент массива.
      unshift(): Добавляет элементы в начало массива.
      slice(): Возвращает новый массив, содержащий копию части исходного массива.
      splice(): Изменяет содержимое массива, удаляя, заменяя или добавляя элементы.
      concat(): Объединяет два или более массивов в один.
      join(): Объединяет все элементы массива в строку.
      reverse(): Переворачивает порядок элементов в массиве.
      sort(): Сортирует элементы массива.
      Особенности использования этих методов заключаются в том, что некоторые из них мутируют исходный массив (например, push(), pop(), shift(), unshift(), splice(), reverse(), sort()), в то время как другие (например, slice(), concat(), join()) возвращают новый массив или другое значение, не изменяя исходный массив.
      
      18. Опишите процесс создания пользовательских функций в JavaScript. Объясните термины область видимости переменных и замыкания.
      Создание пользовательских функций в JavaScript:
      В JavaScript функции можно создавать разными способами:
      Function Declaration: Это классический способ объявления функции, который начинается с ключевого слова function, за которым следуют имя функции, список параметров в круглых скобках, разделенных запятыми, и инструкции, которые будут выполнены после вызова функции, заключенные в фигурные скобки. Например:
      JavaScript
      function square(number) {
        return number * number;
      }
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Function Expression: Функция может быть определена в виде выражения, которое может быть анонимным. Например:
      JavaScript
      var square = function(number) {
        return number * number;
      };
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Arrow Function: Стрелочные функции представляют собой сокращенный синтаксис для определения функций. Например:
      JavaScript
      var square = (number) => {
        return number * number;
      };
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Constructor Function: Функции также можно создавать с помощью конструктора Function.
      Область видимости переменных:
      Область видимости определяет доступность переменных. В JavaScript существуют два типа области видимости:
      Глобальная область видимости: Переменные, объявленные вне всех функций, являются глобальными и доступны во всем коде программы.
      Локальная область видимости: Переменные, объявленные внутри функции, являются локальными и доступны только внутри этой функции.
      Замыкания:
      Замыкание - это комбинация функции и лексического окружения, в котором эта функция была определена. Другими словами, замыкание даёт вам доступ к области видимости внешней функции из внутренней функции. В JavaScript замыкания создаются каждый раз при создании функции, во время её создания.
      
      19. Опишите процесс создания пользовательских функций в JavaScript. Назовите особенности синтаксиса определения и использования функций в JavaScript.
      В JavaScript функции можно создавать разными способами:
      Function Declaration: Это классический способ объявления функции, который начинается с ключевого слова function, за которым следуют имя функции, список параметров в круглых скобках, разделенных запятыми, и инструкции, которые будут выполнены после вызова функции, заключенные в фигурные скобки. Например:
      JavaScript
      function square(number) {
        return number * number;
      }
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Function Expression: Функция может быть определена в виде выражения, которое может быть анонимным. Например:
      JavaScript
      var square = function(number) {
        return number * number;
      };
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Arrow Function: Стрелочные функции представляют собой сокращенный синтаксис для определения функций. Например:
      JavaScript
      var square = (number) => {
        return number * number;
      };
      Код, созданный ИИ. Внимательно просмотрите и используйте. Дополнительные сведения о часто задаваемых вопросах.
      Constructor Function: Функции также можно создавать с помощью конструктора Function.
      Особенности синтаксиса определения и использования функций в JavaScript:
      Функции в JavaScript являются объектами первого класса, что означает, что они могут быть переданы как аргументы, возвращены из других функций, присвоены переменным или свойствам объектов.
      Функции могут быть анонимными, то есть не иметь имени.
      Функции могут быть вызваны с любым количеством аргументов, независимо от того, сколько параметров было указано при объявлении функции.
      Функции могут возвращать значение с помощью инструкции return.
      Если функция вызывается как метод объекта, специальная переменная this внутри функции ссылается на этот объект.
      Если функция вызывается как конструктор с помощью ключевого слова new, она создает и возвращает новый объект.
      
      20. Дайте определение понятиям объекты и методы в JavaScript. Назовите контекст this и способы определения вызова контекста. Назовите назначение и особенности использования основных стандартных объектов в JavaScript.
      Объекты в JavaScript - это структуры данных, которые могут содержать данные и функции. Они представляют собой ассоциативные массивы, которые хранят соответствия “ключ => значение” и имеют несколько стандартных методов. Объекты в JavaScript имеют свойства, которые определяют их характеристики.
      Методы в JavaScript - это функции, которые добавлены в ассоциативный массив. Они являются свойствами объекта и могут быть вызваны для выполнения определенных действий.
      Контекст this в JavaScript относится к объекту, в контексте которого выполняется текущая функция. Значение this всегда динамично и изменяется в зависимости от объекта слева от точки, в которой вызывается функция.
      Способы определения вызова контекста включают использование встроенных методов JavaScript, таких как call, bind и apply, которые позволяют указывать желаемый контекст при вызове функции. Кроме того, стрелочные функции, введенные в ES2015, не создают собственные привязки к this, они сохраняют значение this лексического окружения, в котором были созданы.
      Стандартные объекты в JavaScript включают в себя различные встроенные объекты, такие как Object, Array, Function, Date, Error, Math, Number, String и другие. Они предоставляют множество полезных методов и свойств, которые можно использовать при работе с соответствующими типами данных.
      
      21. Охарактеризуйте сущность класса в JavaScript. Опишите тело класса и задание методов. Дайте определение терминам наследование и прототипы.
      Сущность класса в JavaScript:
      Классы в JavaScript были введены в ECMAScript 2015 и представляют собой синтаксический сахар над существующим в JavaScript механизмом прототипного наследования. Синтаксис классов не вводит новую объектно-ориентированную модель, а предоставляет более простой и понятный способ создания объектов и организации наследования.
      Тело класса и задание методов:
      Тело класса — это часть кода, заключённая в фигурные скобки {}. Здесь вы можете объявлять члены класса, такие как методы и конструктор. Метод constructor — специальный метод, необходимый для создания и инициализации объектов, созданных с помощью класса. В классе может быть только один метод с именем constructor.
      Наследование и прототипы:
      Наследование в JavaScript работает с помощью прототипов. Каждый объект имеет внутреннюю ссылку на другой объект, называемый его прототипом. У объекта-прототипа также есть свой собственный прототип и так далее до тех пор, пока цепочка не завершится объектом, у которого свойство prototype равно null. По определению, null не имеет прототипа и является завершающим звеном в цепочке прототипов.
      
      22. Объясните термин объектная модель браузера (BOM). Опишите процесс использования объектов HTML и объектной модели документа (DOM).
      Объектная модель браузера (BOM) - это интерфейс, который предоставляет JavaScript для взаимодействия со средой браузера. BOM представляет различные объекты, предоставляемые средой браузера, позволяя JavaScript взаимодействовать с самим браузером, обрабатывать свойства окна и управлять взаимодействием с пользователем. Ключевые компоненты BOM включают объекты window, document, navigator, history и screen.
      Объектная модель документа (DOM) - это программный интерфейс для HTML и XML документов. DOM предоставляет структурированное представление документа (дерева), и определяет способ, по которому структура может быть доступна для программы, для изменения структуры документа, его стиля и содержания. DOM обеспечивает представление документа в виде структурированной группы узлов и объектов, которые имеют свойства и методы. По сути, она связывает веб-страницы со скриптами или языками программирования.
      Процесс использования объектов HTML и DOM:
      Чтение DOM: Вы можете получить доступ к любому элементу на веб-странице с помощью DOM. Например, вы можете использовать методы, такие как getElementById или querySelector, чтобы выбрать определенный элемент.
      Изменение DOM: После того, как вы получили доступ к элементу, вы можете изменить его содержимое, стиль или атрибуты. Например, вы можете использовать свойство innerHTML для изменения HTML-содержимого элемента.
      Добавление и удаление узлов: Вы можете использовать методы, такие как appendChild или removeChild, чтобы добавить или удалить узлы в DOM.
      Обработка событий: Вы можете использовать методы, такие как addEventListener, чтобы реагировать на действия пользователя, такие как клики мыши или нажатия клавиш.
      
      23. Опишите термин событие. Дайте классификацию событий на странице. Опишите использование событий на странице. Опишите процесс всплытия и перехвата событий, способы отмены действий «по умолчанию».
      Событие в JavaScript - это действие или случай, возникающее в системе, о которых система сообщает вам, чтобы вы могли с ними взаимодействовать. Например, если пользователь нажимает кнопку на веб-странице, вы можете ответить на это действие, отобразив информационное окно.
      Классификация событий на странице:
      События на веб-странице могут быть разного типа, включая клик мыши, нажатие клавиши, изменение значения элемента формы, загрузку страницы и другие.
      Использование событий на странице:
      Каждое доступное событие имеет обработчик событий — блок кода (обычно это функция JavaScript), который будет запускаться при срабатывании события. Когда такой блок кода определён на запуск в ответ на возникновение события, мы говорим, что мы регистрируем обработчик событий.
      Процесс всплытия и перехвата событий:
      Всплытие и перехват – это процессы, которые происходят при возникновении событий в JavaScript. Когда происходит какое-либо событие, например, щелчок мыши или отправка формы, событие вызывается на элементе, на котором оно произошло. Однако, событие всплывает на верхние элементы, расположенные выше в иерархии DOM-дерева, и может быть перехвачено на любом из них.
      Способы отмены действий «по умолчанию»:
      Основной способ – это воспользоваться объектом event. Для отмены действия браузера существует стандартный метод event.preventDefault (). Если же обработчик назначен через on<событие> (не через addEventListener), то также можно вернуть false из обработчика.
      
      24. Опишите сущность события. Назовите типы и стадии событий. Назовите способы задания обработчиков событий. Опишите использование событий.
      Сущность события:
      События в JavaScript — это действия или случаи, возникающие в системе, о которых система сообщает вам, чтобы вы могли с ними взаимодействовать. Например, если пользователь нажимает кнопку на веб-странице, вы можете ответить на это действие, отобразив информационное окно.
      Типы и стадии событий:
      Существует множество различных видов событий, которые могут произойти, например: пользователь кликает мышью или наводит курсор на определённый элемент, пользователь нажимает клавишу на клавиатуре, пользователь изменяет размер или закрывает окно браузера, завершение загрузки веб-страницы, отправка данных через формы, воспроизведение видео, пауза или завершение воспроизведения, произошла ошибка и другие.
      Способы задания обработчиков событий:
      Каждое доступное событие имеет обработчик событий — блок кода (обычно это функция JavaScript), который будет запускаться при срабатывании события. Обработчики событий можно задать несколькими способами:
      Через HTML-атрибут on{событие} (не является хорошей практикой).
      Посредством свойства DOM-элемента on{событие}.
      Используя специальный метод addEventListener().
      Использование событий:
      При возникновении события система генерирует сигнал, а также предоставляет механизм, с помощью которого можно автоматически предпринимать какие-либо действия (например, выполнить определённый код), когда происходит событие. Например, вы можете использовать обработчик событий JavaScript (event listener), чтобы обнаружить и выполнить определенную задачу или набор задач.
      
      25. Опишите формы и процесс обработки данных формы средствами JavaScript. Назовите особенности работы с сенсорными устройствами.
      Формы и обработка данных формы средствами JavaScript:
      Формы в HTML предоставляют интерфейс для сбора данных от пользователей. JavaScript может быть использован для обработки этих данных, валидации формы и отправки данных на сервер.
      Процесс обработки данных формы включает следующие шаги:
      Получение данных: JavaScript может получить доступ к данным формы, используя DOM. Например, вы можете использовать метод getElementById или querySelector для выбора формы или ее элементов.
      Валидация данных: JavaScript может проверить данные перед их отправкой на сервер. Например, вы можете проверить, заполнены ли все обязательные поля, или соответствует ли введенный адрес электронной почты правильному формату.
      Отправка данных: JavaScript может отправить данные на сервер асинхронно, используя AJAX (Asynchronous JavaScript And XML). Это позволяет отправить данные на сервер и получить ответ без перезагрузки страницы.
      Особенности работы с сенсорными устройствами:
      JavaScript предоставляет специальные события для работы с сенсорными устройствами. Эти события позволяют отслеживать касания и жесты на сенсорных устройствах. Вот некоторые из них:
      touchstart: Срабатывает при начале касания, пользователь нажал на экран.
      touchmove: Срабатывает, когда пользователь двигает пальцем по экрану.
      touchend: Срабатывает, когда пользователь отпустил экран.
      touchcancel: Срабатывает при отмене касания. Это событие происходит, если пользователь заходит за край страницы, переворачивает экран, сворачивает браузер и так далее.
      
      26. Дайте определение понятию регулярные выражения. Опишите сущность и назначение регулярного выражения. Назовите способы создания регулярных выражений.
      Регулярные выражения - это формальный язык, используемый в компьютерных программах, работающих с текстом, для поиска и осуществления манипуляций с подстроками в тексте, основанный на использовании метасимволов.
      Сущность и назначение регулярного выражения:
      Регулярные выражения представляют собой мощный инструмент для обработки текста. Они позволяют задавать шаблоны для поиска или замены текста в строке или файле. Результатом работы с регулярным выражением может быть проверка наличия искомого образца в заданном тексте, определение подстроки текста, которая сопоставляется образцу, или определение групп символов, соответствующих отдельным частям образца.
      Способы создания регулярных выражений:
      Регулярные выражения можно создать двумя способами:
      С помощью литералов регулярных выражений, которые заключаются в слэши. Например: let reg = /hello/;
      Через специальный объект RegExp. Например: let reg = new RegExp('hello');
      
      27. Опишите библиотеку JQuery. Назовите преимущества использования библиотеки JQuery. Опишите синтаксис команд, селекторов JQuery и особенности обработки событий.
      Библиотека JQuery:
      JQuery - это бесплатная JavaScript-библиотека с открытым исходным кодом1. Она заметно упрощает веб-разработку, позволяя писать меньше кода, чем на ванильном JavaScript. JQuery чаще всего используется для удобного взаимодействия с DOM-элементами.
      Преимущества использования библиотеки JQuery:
      Быстрая и простая обработка событий.
      Удобный API для работы с анимацией.
      Поддержка AJAX.
      Кросс-браузерность.
      Синтаксис команд, селекторов JQuery:
      Базовый синтаксис JQuery разработан специально для выбора элементов HTML и выполнения некоторых действий над элементами. Базовый синтаксис имеет следующий вид: $ (селектор).действие().
      Особенности обработки событий в JQuery:
      В JQuery все данные по событиям хранятся в переменной jQuery.cache. JQuery скрывает различия реализации между браузерами, определяя свой собственный объект события. Большинство свойств исходного события копируются и нормализуются в новый объект события.
      
      28. Дайте определение понятию формат JSON. Назовите способы обработки данных в клиентских приложениях. Опишите различные подходы к взаимодействию с сервером.
      Формат JSON:
      JSON (JavaScript Object Notation) - это стандартный текстовый формат для представления структурированных данных на основе синтаксиса JavaScript. Он используется практически во всех скриптовых языках программирования, но может использоваться отдельно от JavaScript. JSON представляет собой компактный и быстро компилируемый формат, который обеспечивает простое и надежное хранение информации.
      Способы обработки данных в клиентских приложениях:
      Сбор важных сведений: Сбор данных от клиента и формирование базы выполняется непрерывно в течение всей деятельности компании.
      Структурирование и доступность информации: Информация структурируется и делается доступной для всех отделов, которые непосредственно контактируют с покупателями.
      Автоматизация маркетинговых задач: Автоматическое генерирование профилей лидов на базе информации из форм на сайте.
      Различные подходы к взаимодействию с сервером:
      Централизованное сетевое взаимодействие: В этом подходе все запросы идут через центральный сервер, который обрабатывает запросы и возвращает ответы.
      Децентрализованное сетевое взаимодействие: В этом подходе нет центрального сервера. Вместо этого каждый узел в сети может обрабатывать запросы и возвращать ответы.
      Взаимодействие через протоколы: Веб-браузеры взаимодействуют с веб-серверами при помощи протоколов передачи гипертекста (HTTP).
      
      29. Дайте определение понятию формат JSON. Назовите способы обработки данных в клиентских приложениях. Опишите обработку данных в формате JSON в сценариях на языке JavaScript.
      Формат JSON:
      JSON (JavaScript Object Notation) - это стандартный текстовый формат для представления структурированных данных на основе синтаксиса JavaScript. Он обычно используется для передачи данных в веб-приложениях (например, отправка некоторых данных с сервера клиенту, таким образом чтобы это могло отображаться на веб-странице или наоборот).
      Способы обработки данных в клиентских приложениях:
      Сбор данных: Сбор данных от клиента и формирование базы выполняется непрерывно в течение всей деятельности компании.
      Структурирование информации: Информация структурируется и делается доступной для всех отделов, которые непосредственно контактируют с покупателями.
      Автоматизация маркетинговых задач: Автоматическое генерирование профилей лидов на базе информации из форм на сайте.
      Обработка данных в формате JSON в сценариях на языке JavaScript:
      Для работы с данными в формате JSON в JavaScript можно использовать методы JSON.parse() и JSON.stringify(). Метод JSON.stringify() преобразует JavaScript объекты в JSON строку, а метод JSON.parse() выполняет обратное преобразование — преобразует JSON строку в JavaScript объект.
      
      30. Дайте определение понятию технология AJAX. Опишите объект XMLHttpRequest: его назначение, методы и свойства.
      Технология AJAX:
      AJAX (Asynchronous JavaScript and XML) - это концепция использования нескольких смежных технологий, ориентированная на разработку высокоинтерактивных приложений, быстро реагирующих на действия пользователя, выполняющих большую часть работы на стороне клиента и взаимодействующих с сервером посредством внеполосных обращений.
      Объект XMLHttpRequest:
      XMLHttpRequest - это API, который предоставляет клиенту функциональность для обмена данными между клиентом и сервером6. Этот API предоставляет простой способ получения данных по ссылке без перезагрузки страницы6. Это позволяет обновлять только часть веб-страницы не прерывая пользователя6. XMLHttpRequest используется в AJAX запросах и особенно в single-page приложениях.
      Методы и свойства объекта XMLHttpRequest:
      onreadystatechange: функция-обработчик состояний запроса, которая вызывается каждый раз при смене статуса объекта.
      readyState: состояние запроса.
      response: тело сущности запроса.
      open(): метод для открытия запроса.
      send(): метод для отправки запроса.
      abort(): метод для прерывания запроса.
      getAllResponseHeaders(), getResponseHeader(): методы для получения заголовков ответа.
      overrideMimeType(): метод для переопределения MIME-типа ответа.
      setRequestHeader(): метод для установки HTTP-заголовков запроса.
      
      31. Дайте определение понятию технология AJAX: его сущность, назначение и принцип работы. Объясните, как происходит организация взаимодействия с сервером с использованием технологии AJAX.
      Технология AJAX:
      AJAX (Asynchronous JavaScript and XML) - это подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. В результате при обновлении данных веб-страница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее.
      Организация взаимодействия с сервером с использованием технологии AJAX:
      AJAX базируется на двух основных принципах:
      Использование технологии динамического обращения к серверу «на лету», без перезагрузки всей страницы полностью, например с использованием XMLHttpRequest (основной объект).
      Использование DHTML для динамического изменения содержания страницы.
      Всякий раз, когда ваши пользователи работают с веб-приложением, например нажимают кнопки или ставят галочки, браузер обменивается данными с удаленным сервером. Передача данных может привести к перезагрузке страниц и прерыванию работы пользователя. С помощью AJAX веб-приложения могут отправлять и получать данные в фоновом режиме, поэтому при необходимости обновляются только небольшие части страницы.
      
      32. Дайте определение понятию серверный язык сценариев PHP. Опишите, как происходит установка и настройка веб-сервера и PHP. Опишите основы синтаксиса PHP. Назовите назначение протокола HTTP и его методов.
      Серверный язык сценариев PHP:
      PHP (PHP: Hypertext Preprocessor) - это серверный язык сценариев, который используется для создания динамических веб-страниц. Он обычно используется для веб-разработки и может быть встроен в HTML. PHP позволяет разработчикам добавлять на свои веб-сайты динамический контент, такой как формы пользовательского ввода и взаимодействие с базой данных.
      Установка и настройка веб-сервера и PHP:
      Для работы с PHP вам потребуется веб-сервер, веб-браузер и сам PHP. Веб-сервер может быть установлен как модуль сервера для таких серверов, как Apache, Microsoft Internet Information Server, Netscape и iPlanet. Если PHP не поддерживает интерфейс для вашего сервера, вы всегда можете использовать его как обработчик CGI или FastCGI. После установки сервера и PHP, вы можете начать создавать PHP-скрипты, загружать их на сервер и просматривать результат их работы в браузере.
      Основы синтаксиса PHP:
      Код PHP обычно находится в файле с расширением .php. Для перехода от разметки HTML к коду PHP используются теги <?php и ?>, между которыми идет код PHP. Каждая отдельная инструкция в PHP завершается точкой с запятой.
      Протокол HTTP и его методы:
      HTTP (HyperText Transfer Protocol) - это протокол, позволяющий получать различные ресурсы, например HTML-документы. Протокол HTTP лежит в основе обмена данными в Интернете. HTTP является протоколом клиент-серверного взаимодействия, что означает инициирование запросов к серверу самим получателем, обычно веб-браузером. Полученный итоговый документ будет (может) состоять из различных поддокументов, являющихся частью итогового документа.
      
      33. Дайте определение понятию серверный язык сценариев PHP. Назовите понятие, назначение и принципы работы WEB-сервера Apache. Опишите элементы структуры программ PHP и основные элементы синтаксиса.
      Серверный язык сценариев PHP:
      PHP (PHP: Hypertext Preprocessor) - это серверный язык сценариев, который используется для создания динамических веб-страниц. Он обычно используется для веб-разработки и может быть встроен в HTML. PHP позволяет разработчикам добавлять на свои веб-сайты динамический контент, такой как формы пользовательского ввода и взаимодействие с базой данных.
      WEB-сервер Apache:
      Apache - это открытое кросс-платформенное программное обеспечение для размещения и поддержки веб-сервера. Веб-сервером называется программа-посредник, которая обеспечивает передачу данных с физических серверов в браузеры пользователей. Apache работает по принципу модулей. Сначала устанавливается ядро, а потом с учетом задач подключаются необходимые модули.
      Элементы структуры программ PHP и основные элементы синтаксиса:
      Программа или скрипт на PHP, как правило, находится в файле с расширением .php. Для перехода от разметки HTML к коду PHP используются теги <?php и ?>, между которыми идет код PHP. Каждая отдельная инструкция в PHP завершается точкой с запятой.
      
      34. Дайте определение понятию серверный язык сценариев PHP. Назовите особенности определения и использования функций в PHP.
      Серверный язык сценариев PHP:
      PHP (PHP: Hypertext Preprocessor) - это серверный язык сценариев, который используется для создания динамических веб-страниц. Он обычно используется для веб-разработки и может быть встроен в HTML. PHP позволяет разработчикам добавлять на свои веб-сайты динамический контент, такой как формы пользовательского ввода и взаимодействие с базой данных.
      Особенности определения и использования функций в PHP:
      Функции в PHP могут быть определены пользователем и имеют глобальную область видимости. Они могут быть вызваны вне функции, даже если были определены внутри и наоборот. PHP не поддерживает перегрузку функции, также отсутствует возможность переопределить или удалить объявленную ранее функцию. Функции не обязаны быть определены до их использования, исключая тот случай, когда функции определяются условно.
      35. Дайте определение понятию массив в PHP. Назовите функции для работы с массивами и строками. Опишите использование стандартных функций для работы с массивами и строками.
      Массив в PHP — это упорядоченное отображение, которое устанавливает соответствие между значением и ключом. Этот тип оптимизирован в нескольких направлениях, поэтому вы можете использовать его как собственно массив, список (вектор), хеш-таблицу (являющуюся реализацией карты), словарь, коллекцию, стек, очередь и, возможно, что-то ещё. Массив (тип array) может быть создан языковой конструкцией array().
      Вот некоторые функции для работы с массивами в PHP345:
      array_change_key_case — меняет регистр всех ключей в массиве
      array_chunk — разбивает массив на части
      array_column — возвращает массив из значений одного столбца входного массива
      array_combine — создаёт новый массив, используя один массив в качестве ключей, а другой для его значений
      array_values — выбирает все значения массива
      array_merge — объединяет массивы или сливает массивы в один
      array_rand — выбирает один или несколько случайных ключей из массива
      array_reverse — возвращает массив с элементами в обратном порядке
      А вот некоторые функции для работы со строками в PHP6:
      
      addcslashes — экранирует строку слешами в стиле языка C
      addslashes — экранирует строку с помощью слешей
      bin2hex — преобразовывает бинарные данные в шестнадцатеричное представление
      chop — псевдоним rtrim
      chr — генерирует односимвольную строку по заданному числу
      chunk_split — разбивает строку на фрагменты
      convert_cyr_string — преобразовывает строку из одной кириллической кодировки в другую
      convert_uudecode — декодирует строку из формата uuencode в обычный вид
      convert_uuencode — кодирует строку в формат uuencode
      count_chars — возвращает информацию о символах, входящих в строку
      crc32 — вычисляет полином CRC32 для строки
      crypt — необратимое хеширование строки
      echo — выводит одну или более строк
      explode — разбивает строку с помощью разделителя
      fprintf — записывает отформатированную строку в поток
      get_html_translation_table — возвращает таблицу преобразований, используемую функциями htmlspecialchars и htmlentities
      hebrev — преобразовывает текст на иврите из логической кодировки в визуальную
      hebrevc — преобразовывает текст на иврите из логической кодировки в визуальную с преобразованием перевода строки
      hex2bin — преобразовывает шестнадцатеричные данные в двоичные
      html_entity_decode — преобразовывает HTML-сущности в символы
      htmlentities — преобразовывает все возможные символы в соответствующие HTML-сущности
      htmlspecialchars_decode — преобразовывает специальные HTML-сущности обратно в символы
      htmlspecialchars — преобразовывает специальные символы в HTML-сущности
      implode — объединяет элементы массива в строку
      join — псевдоним implode
      lcfirst — преобразовывает первый символ строки в нижний регистр
      levenshtein — вычисляет расстояние Левенштейна между двумя строками
      localeconv — возвращает информацию о форматировании чисел
      ltrim — удаляет пробелы (или другие символы) из начала строки
      md5_file — возвращает MD5-хеш файла
      md5 — возвращает MD5-хеш строки
      metaphone — возвращает ключ metaphone для строки
      money_format — форматирует число как денежную величину
      nl_langinfo — возвращает информацию о языке и локали
      nl2br — вставляет HTML-код разрыва строки перед каждым переводом строки
      number_format — форматирует число с разделением групп
      ord — конвертирует первый байт строки в число от 0 до 255
      parse_str — разбирает строку в переменные
      print — выводит строку
      printf — выводит отформатированную строку
      quoted_printable_decode — преобразовывает строку, закодированную методом quoted-printable, в 8-битную строку
      quoted_printable_encode — преобразовывает 8-битную строку методом quoted-printable
      quotemeta — экранирует специальные символы
      rtrim — удаляет пробелы (или другие символы) из конца строки
      setlocale — устанавливает настройки локали
      sha1_file — возвращает SHA1-хеш файла
      Вот примеры использования некоторых из этих функций:
      PHP
      // Создание массива
      $array = array("foo" => "bar", "bar" => "foo");
      // Использование функции array_push для добавления элемента в конец массива
      array_push($array, "new element");
      // Использование функции array_pop для извлечения последнего элемента массива
      $lastElement = array_pop($array);
      // Использование функции explode для разбиения строки на массив
      $string = "Hello, World!";
      $arrayFromString = explode(", ", $string);
      // Использование функции implode для объединения элементов массива в строку
      $stringFromArray = implode(", ", $arrayFromString);
      
      36. Дайте определение понятию серверный язык сценариев PHP. Назовите стандартные функции PHP для работы с файловой структурой и управления временем.
      PHP — это серверный язык сценариев, который используется для создания динамических веб-страниц. Он обычно используется для веб-разработки и может быть встроен в HTML. PHP позволяет разработчикам добавлять на свои веб-сайты динамический контент, такой как формы пользовательского ввода и взаимодействие с базой данных. PHP — это инструмент, который программисты используют для создания веб-сайтов, которые могут делать больше, чем просто отображать статическую информацию. PHP-скрипты выполняются на сервере, а это значит, что пользователю не нужно устанавливать PHP на свой компьютер.
      Вот некоторые стандартные функции PHP для работы с файловой структурой:
      copy — копирует файл
      file_exists — проверяет существование указанного файла или каталога
      file_get_contents — читает содержимое файла в строку
      file_put_contents — записывает данные в файл
      file — читает содержимое файла и помещает его в массив
      А вот некоторые стандартные функции PHP для управления временем:
      date — форматирует временную метку Unix
      getdate — возвращает информацию о дате/времени
      gettimeofday — возвращает текущее время
      gmdate — форматирует дату/время по Гринвичу
      gmmktime — возвращает локальную метку времени Unix для времени по Гринвичу
      strftime — форматирует текущую дату/время с учётом текущих настроек локали
      Вот примеры использования некоторых из этих функций:
      PHP
      // Копирование файла
      copy('source.txt', 'destination.txt');
      // Проверка существования файла
      if (file_exists('file.txt')) {
          echo "Файл существует";
      } else {
          echo "Файл не существует";
      }
      // Чтение содержимого файла в строку
      $content = file_get_contents('file.txt');
      echo $content;
      // Запись данных в файл
      file_put_contents('file.txt', 'Новое содержимое');
      // Чтение содержимого файла в массив
      $lines = file('file.txt');
      foreach ($lines as $line_num => $line) {
          echo "Строка #{$line_num} : " . $line . "\n";
      }
      // Получение текущей даты и времени
      echo date('Y-m-d H:i:s');
      
      37. Дайте определение понятию cookie. Как происходит управление кэшированием, буферизация и хэширование. Опишите метод HEAD. Назовите назначение буферизации и хэширования.
      Cookie — это небольшой фрагмент данных, отправленный веб-сервером и хранимый на компьютере пользователя. Веб-клиент (обычно веб-браузер) всякий раз при попытке открыть страницу соответствующего сайта пересылает этот фрагмент данных веб-серверу в составе HTTP-запроса. Cookie используются для сохранения данных на стороне пользователя, на практике обычно используется для аутентификации пользователя, хранения персональных предпочтений и настроек пользователя, отслеживания состояния сеанса доступа пользователя, хранения сведений статистики о пользователях.
      Кэширование — это использование высокоскоростного уровня хранения, на котором можно хранить наборы данных, как правило, временного характера. Доступ к данным на этом уровне осуществляется быстрее, чем к основному месту их хранения. С помощью кэширования становится возможным эффективное повторное использование ранее полученных или вычисленных данных.
      Буферизация — это использование некоторой области памяти компьютера для запоминания информации в процессе информационного обмена между двумя устройствами. Буфером является определённая область памяти, которая предназначена для запоминания информации при осуществлении информационного обмена между парой устройств или процессов.
      Хеширование — это преобразование информации с помощью особых математических формул. В результате возникает хеш — отображение данных в виде короткой строки, в идеале — уникальной для каждого набора информации. Хеширование используется для проверки информации.
      HTTP-метод HEAD запрашивает заголовки, идентичные тем, что возвращаются, если указанный ресурс будет запрошен с помощью HTTP-метода GET. Такой запрос может быть выполнен перед загрузкой большого ресурса, например, для экономии пропускной способности. Ответ на метод HEAD не должен содержать тело.
      Назначение буферизации и хеширования:
      Буферизация используется для временного хранения данных в процессе их передачи от одного устройства к другому. Это может быть необходимо, например, при различии скоростей передачи данных устройствами или при различии объемов данных, которые могут быть приняты или переданы устройствами одновременно.
      Хеширование используется для проверки информации. Это может быть нужно, например, при проверке паролей, при проверке целостности передаваемой информации, при обнаружении попыток взлома и т.д.
      
      38. Дайте определение понятиям cookie и HTTP-аутентификация. Как происходит управление сессиями. Назовите особенности управления сессиями в PHP.
      Cookie — это небольшой фрагмент данных, отправленный веб-сервером и хранимый на компьютере пользователя. Они используются для сохранения данных на стороне пользователя, например, для аутентификации пользователя, хранения персональных предпочтений и настроек пользователя, отслеживания состояния сеанса доступа пользователя, хранения сведений статистики о пользователях.
      HTTP-аутентификация — это механизм безопасности для проверки пользователя, имеющего право доступа к веб-ресурсу. Он включает в себя связь между клиентом и сервером с использованием заголовка HTTP, где сервер запрашивает учетные данные пользователя для аутентификации.
      Управление сессиями — это процесс поддержания сессии «между клиентом и сервером», «для пользователя», «в течение определенного периода времени». Сессии в PHP представляют собой некий способ хранения информации в переменных сессии, используемых для аутентификации на нескольких веб-сервисах.
      Вот некоторые особенности управления сессиями в PHP:
      Модуль сессии не гарантирует, что хранимая сессионная информация доступна только пользователю, который создал сессию.
      Необходимо принять дополнительные меры по защите конфиденциальности сессии, основываясь на связанных с ней данных.
      В настоящее время PHP использует адаптивное управление сессиями по умолчанию.
      Если session.use_strict_mode включён и обработчик сохранения сессии это поддерживает, неинициализированный сессионный ID отвергается и создаётся новый.
      Определённый пользователем обработчик сохранения также может поддерживать строгий сессионный режим, путём реализации функции/метода проверки корректности идентификатора сессии.
      Система управления сессиями поддерживает ряд опций, которые могут быть указаны в файле php.ini.
      PHP предоставляет набор функций для работы с сессиями, таких как session_start, session_destroy, session_id, session_name, и другие.
      
      39. Дайте определение понятию протокол OAuth: его аутентификация и авторизация пользователей. Опишите основы работы с почтовым сервисом.
      OAuth — это стандарт авторизации, который обеспечивает предоставление третьей стороне ограниченного доступа к защищённым ресурсам пользователя без передачи ей логина и пароля. OAuth позволяет социальным сервисам интегрироваться между собой и дает безопасный способ обмена персональной информацией. Однако, стоит отметить, что OAuth не является спецификацией аутентификации. OAuth имеет дело с делегированной авторизацией.
      Аутентификация проверяет личность пользователя, чтобы убедиться, что он является авторизованным пользователем организации. Затем авторизация определяет уровень доступа пользователя к ресурсам организации.
      В отношении работы с почтовым сервисом, основные этапы включают:
      Пользователь составляет сообщение и нажимает кнопку отправки.
      В этот момент агент пользователя (Mail User Agent) передает информацию на сервер MTA (Mail Transfer Agent).
      После этого MTA отправляет письмо на сервер Mail Delivery Agent (MDA).
      На данном этапе информация хранится до того момента, когда адресат решит воспользоваться ящиком и получит письмо.
      Теперь почта извлекается по одному из основных протоколов (POP или IMAP) и попадает на MUA (почтовый клиент получателя).
      Важно отметить, что для обеспечения безопасности, MDA защищается логином и паролем от учетной записи.
      
      40. Опишите, в чем состоит опасность SQL-инъекций. Как достичь безопасности web-приложения. Назовите методы ее повышения/достижения.
      SQL-инъекция — это уязвимость, которая позволяет злоумышленнику использовать фрагмент вредоносного кода на языке структурированных запросов (SQL) для манипулирования базой данных и получения доступа к потенциально ценной информации. Атаки на основе таких уязвимостей – одни из самых распространенных и опасных. Они могут быть нацелены на любое веб-приложение или веб-сайт, которые взаимодействуют с базой данных SQL. Злоумышленники могут использовать эту уязвимость в разных преступных целях, начиная с кражи конфиденциальных данных и заканчивая манипулированием сведениями в базе.
      Для обеспечения безопасности веб-приложения необходимо уделять особое внимание к разработке всего веб-сайта: к вашему веб-приложению, конфигурации веб-сервера, при написании политик создания и обновления паролей, а также кода на стороне клиента. Если вы используете веб-фреймворк для серверной части, то он почти наверняка обеспечит «по умолчанию» надёжные и продуманные механизмы защиты от ряда наиболее распространённых атак. Другие атаки можно смягчить с помощью конфигурации вашего веб-сервера, например, включив HTTPS.
      Вот некоторые методы повышения безопасности веб-приложения:
      Проводите регулярное тестирование безопасности, включая сканирование уязвимостей и тестирование на проникновение, чтобы выявить и устранить слабые места в безопасности сайта.
      Регулярно создавайте резервные копии данных веб-сайта и имейте план аварийного восстановления.
      Заблокируйте некоторые функции в отдельных приложениях. Если какая-то из функций делает приложение более уязвимым для атак, отключите её на время.
      Используйте брандмауэр веб-приложений (WAF) для защиты от самых неприятных уязвимостей.
      
      41. Объясните, как происходит авторизация через социальные сети средствами PHP. Опишите использование одной отдельной социальной сети.
      Авторизация через социальные сети в PHP обычно использует API выбранной социальной сети и получает уникальный идентификатор пользователя. Полученный идентификатор можно использовать для авторизации пользователя на вашем сайте.
      Вот основные шаги, которые обычно выполняются при авторизации через социальные сети:
      Создание приложений в социальных сетях: Для каждой социальной сети может потребоваться разный подход и библиотеки, поэтому ознакомьтесь со стандартами для каждой платформы.
      Написание кода на PHP: Создайте ссылки на страницы авторизации в каждой социальной сети. Ссылки должны содержать параметры, которые будут отправлять запросы и возвращать ответы от серверов социальных сете.
      Обработка ответов: После того, как пользователь авторизовался через социальную сеть, сервер вернет данные о пользователе, которые вы можете использовать для авторизации на вашем сайте.
      Сохранение данных о пользователях: Создайте таблицу пользователей и сохраняйте данные о новых пользователей из социальных сетей в эту таблицу. Это позволит повторно авторизовывать пользователей, которые уже регистрировались на вашем сайте через социальную сеть.
      Важно отметить, что при использовании авторизации через социальные сети, один и тот же пользователь может иметь несколько аккаунтов, связанных с разными социальными сетями. Чтобы предотвратить создание дубликатов аккаунтов, можно связать логины из социальных сетей с аккаунтами на вашем сайте по схеме 1 аккаунт - несколько записей из социальных сетей. Если человек авторизовывается через сервисы типа uLogin, можно привязать полученный результат к уже существующему аккаунту (сверять по адресу почты) или создавать новый при отсутствии такого имейла в вашей базе. Таким образом, если на разных логинах социальных сетей у пользователя одинаковый адрес email, то при входе через эти разные логины всё равно получится одна учётная запись на вашем сайте.
      
      42. Опишите, как происходит генерация ссылок аутентификации. Опишите процесс использования нескольких социальных сетей.
      Генерация ссылок аутентификации обычно включает в себя следующие шаги:
      Создание приложения в социальной сети: Для каждой социальной сети потребуется создать приложение, которое будет использоваться для аутентификации. При создании приложения вы получите уникальные идентификаторы приложения, которые будут использоваться для генерации ссылок аутентификации.
      Генерация ссылки аутентификации: Ссылка аутентификации обычно включает в себя идентификатор приложения и URL-адрес перенаправления, который будет использоваться после успешной аутентификации. Например, для генерации ссылки аутентификации в ВКонтакте, можно использовать следующий код на PHP:
      PHP
      if (!isset ($_GET ['code'])) { 
          echo '<p><a href=\"'. $vkAdapter->getAuthUrl (). '\">Аутентификация через ВКонтакте</a></p>'; 
      }
      В этом примере $vkAdapter->getAuthUrl() генерирует URL-адрес для аутентификации через ВКонтакте.
      Использование нескольких социальных сетей для аутентификации обычно включает в себя создание отдельного приложения для каждой социальной сети и генерацию отдельной ссылки аутентификации для каждой из них. Пользователи могут выбрать, через какую социальную сеть они хотят войти, и будут перенаправлены на соответствующую страницу аутентификации. После успешной аутентификации они будут перенаправлены обратно на ваш сайт.
      Важно отметить, что при использовании аутентификации через социальные сети, один и тот же пользователь может иметь несколько аккаунтов, связанных с разными социальными сетями. Чтобы предотвратить создание дубликатов аккаунтов, можно связать логины из социальных сетей с аккаунтами на вашем сайте по схеме 1 аккаунт - несколько записей из социальных сетей.
      
      43. Опишите процесс использования БД для аутентификации через социальные сети средствами PHP. Охарактеризуйте работу с данными пользователя.
      Авторизация через социальные сети в PHP обычно включает в себя следующие шаги:
      Создание приложения в социальной сети: Для каждой социальной сети потребуется создать приложение, которое будет использоваться для аутентификации. При создании приложения вы получите уникальные идентификаторы приложения, которые будут использоваться для генерации ссылок аутентификации.
      Генерация ссылки аутентификации: Ссылка аутентификации обычно включает в себя идентификатор приложения и URL-адрес перенаправления, который будет использоваться после успешной аутентификации.
      Обработка ответов: После того, как пользователь авторизовался через социальную сеть, сервер вернет данные о пользователе, которые вы можете использовать для авторизации на вашем сайте.
      Сохранение данных о пользователях: Создайте таблицу пользователей и сохраняйте данные о новых пользователей из социальных сетей в эту таблицу. Это позволит повторно авторизовывать пользователей, которые уже регистрировались на вашем сайте через социальную сеть.
      Работа с данными пользователя в PHP обычно включает в себя следующие шаги:
      Получение данных: Данные пользователя могут быть получены из различных источников, таких как формы HTML, файлы, базы данных и т.д.
      Обработка данных: Данные пользователя должны быть обработаны перед использованием. Это может включать в себя очистку данных от лишних пробелов, удаление HTML-тегов, замену спецсимволов и т.д.
      Сохранение данных: Обработанные данные пользователя могут быть сохранены в базе данных для дальнейшего использования.
      Использование данных: Данные пользователя могут быть использованы для различных целей, таких как аутентификация, персонализация контента, анализ поведения пользователя и т.д.
      Важно отметить, что при работе с данными пользователя необходимо всегда учитывать вопросы безопасности. Например, при сохранении паролей пользователя в базе данных рекомендуется использовать хеширование паролей для обеспечения безопасности.
      
      44. Дайте определение понятию регистрация пользователей средствами PHP. Опишите расширение возможностей PHP, путем подключения дополнительных модулей.
      Регистрация пользователей средствами PHP — это процесс, в котором пользователь предоставляет свои данные (например, имя пользователя, пароль, адрес электронной почты и т.д.) через форму на веб-сайте. Эти данные затем обрабатываются PHP-скриптом, который сохраняет информацию в базе данных. После успешной регистрации пользователь может войти в систему с использованием своих учетных данных.
      Расширение возможностей PHP путем подключения дополнительных модулей позволяет добавить новые функции и функциональность в PHP. Модули представляют собой наборы директив и функций, которые можно загрузить в PHP. Например, PHP-GTK является модулем PHP и позволяет создавать оконные приложения, выполняющиеся на стороне клиента. Другой пример — расширения, которые можно включить для текущей версии PHP через cPanel. Эти расширения могут добавить новые функции и функциональность в PHP, улучшая его возможности.
      
      45. Объясните, как происходит организация работы с почтовыми сервисами в PHP. Назовите отличие библиотеки PHPMailer и функции mail().
      Организация работы с почтовыми сервисами в PHP обычно включает в себя следующие шаги:
      Создание тестового файла PHP Mail: Вам необходимо создать файл для PHP-скрипта и поместить его в каталог public_html, чтобы к нему можно было легко получить доступ через доменное имя.
      Настройка функции mail(): Функция PHP mail() вызывает программу Sendmail, обычно настраиваемую системным администратором, которая и позволяет отправлять электронные письма. Чтобы использовать эту функцию, убедитесь, что ваш хостинг-провайдер позволяет вам вручную управлять службой Sendmail.
      Отправка электронного письма: Теперь вы можете отправить электронное письмо, открыв в браузере VashDomen/testmail.php. Не забудьте заменить «VashDomen» на доменное имя, которое вы использовали для создания тестового файла testmail.php.
      Отличие библиотеки PHPMailer от функции mail() заключается в том, что PHPMailer — это мощная библиотека, реализующая почтовые транспорты, а не использующая sendmail как стандартная mail() функция. PHPMailer имеет из коробки большое количество возможностей, таких как полная поддержка SMTP, Qmail, POP3, IDN, DKIM; поддержка SSL и TLS; работает на любой win32 и *nix платформе; гибкость отладки; определяемые вручную заголовки писем; совмещение нескольких сообщений и вложений; встроенная поддержка изображений; умеет посылать письма с множественными: адресатами (TO), копиями (CC), BCC и REPLY-TO; многослойные/альтернативные сообщения для клиентов, которые не могут читать HTML письма.
      
      46. Объясните, как происходит отправка электронных писем с помощью PHPMailer. Назовите функции библиотеки PHPMailer.
      Отправка электронных писем с помощью PHPMailer обычно включает в себя следующие шаги:
      Установка библиотеки PHPMailer: Для установки PHPMailer можно использовать менеджер пакетов (композер), выполнив следующую команду: composer require phpmailer/phpmailer.
      Создание объекта PHPMailer: Создайте объект PHPMailer, который будет использоваться для отправки электронных писем.
      Настройка параметров электронного письма: Укажите адрес электронной почты отправителя, имя отправителя, адрес электронной почты получателя, тему письма, текст письма и другие параметры, такие как CC, BCC и Reply-To.
      Отправка электронного письма: Используйте метод send() объекта PHPMailer для отправки электронного письма.
      Вот некоторые функции библиотеки PHPMailer:
      Отображение сообщений об ошибках отправки писем более чем на 40 различных языках.
      Встроенная поддержка аутентификации через SSL и TSL.
      Возможность отправки обычной текстовой копии письма клиентам, не поддерживающим письма формата HTML.
      Поддержка протокола SMTP, который могут использовать аутентифицированные пользователи.
      Поддержка ООП, что делает PHPMailer более гибким в использовании по сравнению с встроенной функцией mail().
      Активное сообщество разработчиков, обеспечивающих безопасность библиотеки и выпуск обновлений.
      
      47. Охарактеризуйте процесс отправки электронного письма с вложением, с помощью PHPMailer. Опишите использование функции mail().
      Отправка электронного письма с вложением с помощью PHPMailer обычно включает в себя следующие шаги:
      Создание объекта PHPMailer: Создайте объект PHPMailer, который будет использоваться для отправки электронных писем.
      Настройка параметров электронного письма: Укажите адрес электронной почты отправителя, имя отправителя, адрес электронной почты получателя, тему письма, текст письма и другие параметры.
      Добавление вложения: Используйте метод addAttachment() объекта PHPMailer для добавления вложения к электронному письму.
      Отправка электронного письма: Используйте метод send() объекта PHPMailer для отправки электронного письма.
      Функция mail() в PHP — это встроенная функция, которая позволяет отправлять электронные письма. Она принимает четыре параметра: адрес электронной почты получателя, тему письма, текст письма и дополнительные заголовки. Функция mail() вызывает программу Sendmail, обычно настраиваемую системным администратором, которая и позволяет отправлять электронные письма. Однако, функция mail() имеет свои ограничения, например, она не поддерживает SMTP-аутентификацию и не позволяет отправлять HTML-письма без дополнительной настройки. В отличие от PHPMailer, функция mail() не поддерживает ООП, что делает её менее гибкой в использовании.
      
      48. Опишите процесс отправки писем на PHP через SMTP. Объясните принцип работы протокола SMTP.
      Отправка электронных писем на PHP через SMTP обычно включает в себя следующие шаги:
      Установка библиотеки PHPMailer: Для установки PHPMailer можно использовать менеджер пакетов (композер), выполнив следующую команду: composer require phpmailer/phpmailer.
      Создание объекта PHPMailer: Создайте объект PHPMailer, который будет использоваться для отправки электронных писем.
      Настройка параметров электронного письма: Укажите адрес электронной почты отправителя, имя отправителя, адрес электронной почты получателя, тему письма, текст письма и другие параметры.
      Отправка электронного письма: Используйте метод send() объекта PHPMailer для отправки электронного письма1.
      SMTP (Simple Mail Transfer Protocol) — это протокол передачи почты. Он был представлен еще в 1982 году, но не теряет актуальности до сих пор. У протокола две главные задачи:
      Проверка корректности настроек системы и предоставление «разрешения» на отправку email-сообщения для определенного устройства.
      Отправка исходящего сообщения на заданный адрес электронной почты и подтверждение успешной доставки. Если сообщение доставить не удается, отправитель получает соответствующее извещение.
      В большинстве случаев протокол SMTP используется для передачи исходящей почты с использованием порта TCP 25. То есть можно сказать, что SMTP-порт — это как раз TCP 25, хоть и не всегда. Иногда задействуется еще порт 465. Так происходит, когда порт требует защищенного SSL-соединения.
      
      49. Опишите как происходит использование библиотеки ApMailer. Охарактеризуйте процесс подключения и инициализации библиотеки ApMailer.
      ApMailer — это библиотека для отправки писем через SMTP. Основная идея данного приложения - простое подключение и быстрое использование функции отправки писем как из консоли, так и из PHP-кода.
      Вот как происходит использование библиотеки ApMailer:
      Подключение библиотеки: Включите библиотеку в своем проекте.
      Инициализация библиотеки: Инициализируйте библиотеку.
      Создание сообщения: Создайте новое текстовое сообщение.
      Установка содержимого сообщения: Установите содержимое сообщения.
      Установка темы сообщения: Установите тему сообщения.
      Добавление получателя: Добавьте получателя сообщения.
      Отправка сообщения: Отправьте сообщение.
      Пример использования в PHP:
      PHP
      <?php 
      include 'phar:///path/to/mailer.phar/lib.php'; 
      Mailer()->init(include '/path/to/mailer.config.php'); 
      $message = Mailer()->newTextMessage(); 
      $message->setContent('Hello world!') 
      ->setSubject('Mail test') 
      ->addRecipient('myemail@example.org'); 
      if (Mailer()->sendMessage($message)) { 
          echo 'Сообщение успешно отправлено.'; 
      } else { 
          echo 'Во время отправки возникли какие-то ошибки, проверьте логи для большей информации.'; 
      }
      ?>
      В этом примере Mailer()->init(include '/path/to/mailer.config.php'); инициализирует библиотеку, а Mailer()->sendMessage($message) отправляет сообщение.
      
      50. Опишите суть организации рассылок PHP. Назовите методы реализации рассылок.
      Организация рассылок в PHP — это процесс, в котором PHP используется для автоматической отправки электронных писем группе получателей. Это может быть полезно для различных целей, таких как информирование пользователей о новостях, обновлениях, предложениях и т.д.
      Вот некоторые методы реализации рассылок в PHP:
      Использование встроенной функции mail(): Функция mail() в PHP позволяет отправлять электронные письма напрямую из PHP-скрипта. Однако, эта функция имеет свои ограничения и может не подходить для больших рассылок.
      Использование библиотеки PHPMailer: PHPMailer — это мощная библиотека, которая предоставляет гибкий и мощный функционал для отправки электронных писем через PHP. Она поддерживает отправку писем через SMTP, что делает её идеальным выбором для больших рассылок.
      Использование сервисов для рассылок: Существуют различные сервисы, такие как SendGrid, Mailchimp, которые предоставляют API для отправки электронных писем через PHP. Эти сервисы обычно предлагают расширенные возможности, такие как отслеживание доставки, управление подписками и т.д.
      Использование систем для организации рассылок: Существуют готовые системы для организации рассылок, такие как phplist. Эти системы предлагают готовые решения для управления рассылками, включая создание и отправку сообщений, управление списками подписчиков и т.д.
      
      51. Дайте определение понятию автоответчики. Назовите методы реализации автоответчиков.
      Автоответчик — это устройство или приложение, которое позволяет автоматически принимать входящий телефонный вызов или сообщение в отсутствие абонента и сообщить ему какую-либо справочную информацию (например, об отсутствии абонента) в виде записанного ранее звукового сообщения. Отдельные автоответчики позволяют позвонившему записать и таким образом оставить звуковое сообщение для вызываемого абонента.
      В современной телефонии существуют несколько видов автоответчиков, каждый из которых выполняет свою функцию и будет полезен в своей ситуации. Условно, все автоответчики можно разделить на две категории: активные и пассивные.
      Активные автоответчики способны реагировать на действия пользователя. Самым ярким примером можно считать интерактивное голосовое меню (IVR). С ним клиент сталкивается при звонке в первую очередь. Чаще всего его используют для маршрутизации обращений и отправке вопроса к ответственному сотруднику.
      Пассивные автоответчики — это системы, которые нужны для простого голосового уведомления о каких-либо событиях. Например, о том, что в данный момент никто не сможет ответить на звонок или о сбое в работе сервиса.
      
      52. Опишите процесс подключения БД MySql. Опишите суть использования PHP и MySQL в проекте.
      Процесс подключения к базе данных MySQL в PHP обычно включает следующие шаги:
      Создание соединения с сервером: Используйте функцию mysql_connect() в PHP для создания соединения с сервером MySQL. Например, mysql -u имя_пользователя –h 127.0.0.1 –p; mysql -h наименование хоста -u dbUser -p dbName.
      Выбор базы данных: После установления соединения с сервером MySQL, выберите базу данных, с которой вы хотите работать.
      Выполнение запросов к базе данных: Теперь вы можете использовать функции PHP для выполнения SQL-запросов к базе данных.
      Закрытие соединения: После выполнения всех необходимых запросов, закройте соединение с сервером MySQL.
      PHP и MySQL часто используются вместе для создания динамических веб-приложений. PHP — это язык программирования, который обрабатывает данные на стороне сервера, а MySQL — это система управления базами данных, которая позволяет хранить и управлять данными. Вместе они позволяют создавать веб-приложения, которые могут принимать, обрабатывать и отображать данные в реальном времени.
      Вот некоторые основные шаги по созданию сайта при помощи PHP и MySQL:
      Создание базы данных MySQL: Создайте базу данных MySQL, которую вы будете использовать для хранения данных вашего веб-сайта.
      Создание таблиц в базе данных: Создайте таблицы в базе данных для хранения различных типов данных, таких как данные пользователей, данные продуктов и т.д.
      Разработка PHP-скриптов для взаимодействия с базой данных: Разработайте PHP-скрипты, которые будут использоваться для выполнения SQL-запросов к базе данных. Это может включать в себя запросы для добавления, обновления, удаления и извлечения данных.
      Создание веб-страниц для отображения данных: Создайте веб-страницы, которые будут использовать PHP-скрипты для отображения данных из базы данных.
      Тестирование и отладка вашего веб-сайта: Проведите тестирование и отладку вашего веб-сайта, чтобы убедиться, что все работает правильно.
      
      53. Назовите базовые функции MySql. Опишите процесс формирования и выполнения запросов к БД в PHP.
      Базовые функции MySQL включают:
      AVG: Возвращает среднее значение из ряда числовых значений.
      COUNT: Возвращает количество строк, которые соответствуют заданному условию.
      MAX и MIN: Возвращают максимальное и минимальное значение из набора числовых или строковых значений.
      SUM: Возвращает сумму набора числовых значений.
      Процесс формирования и выполнения запросов к базе данных в PHP обычно включает следующие шаги:
      Установка соединения с сервером: Используйте функцию mysqli_connect() в PHP для создания соединения с сервером MySQL.
      Выбор базы данных: После установления соединения с сервером MySQL, выберите базу данных, с которой вы хотите работать.
      Формирование SQL-запроса: Создайте SQL-запрос, который будет использоваться для взаимодействия с базой данных.
      Выполнение SQL-запроса: Используйте функцию mysqli_query() для выполнения SQL-запроса.
      Обработка результатов: Если ваш SQL-запрос возвращает результаты (например, при использовании SELECT), вы можете обработать эти результаты и использовать их в своем приложении.
      Закрытие соединения: После выполнения всех необходимых запросов, закройте соединение с сервером MySQL с помощью функции mysqli_close().
      Важно отметить, что при работе с базой данных важно всегда учитывать вопросы безопасности, такие как защита от SQL-инъекций.
      
      54. Назовите основные виды запросов MySql. Определите главную функцию PHP для работы с MySQL.
      Основные виды запросов MySQL включают:
      SELECT: Выборка данных.
      INSERT: Вставка новых данных.
      UPDATE: Обновление данных.
      DELETE: Удаление данных.
      CREATE: Создание таблиц.
      DROP: Удаление объектов из базы данных.
      ALTER: Добавление, изменение или удаление столбцов.
      Главной функцией PHP для работы с MySQL является mysqli_connect(), которая используется для установления соединения с сервером MySQL. Эта функция принимает параметры, такие как имя хоста, имя пользователя, пароль и имя базы данных, и возвращает объект, представляющий соединение с сервером MySQL. Этот объект затем можно использовать для выполнения SQL-запросов к базе данных.
      
      55. Дайте определение понятию CURL. Дайте описание библиотеки. Назовите функции библиотеки. Опишите функции.
      CURL (Client URL) — это кроссплатформенная служебная программа командной строки, позволяющая взаимодействовать с множеством различных серверов по множеству различных протоколов с синтаксисом URL.
      Библиотека CURL, также известная как libcurl, является библиотекой с открытым исходным кодом, используемой для отправки HTTP-запросов с различных языков программирования, включая C, PHP и другие. Она поддерживает работу с протоколами: HTTP, HTTPS, FTP, FTPS, IMAP, POP3, SMTP и другими.
      Основные функции библиотеки CURL включают:
      curl_init(): Инициализирует новый сеанс и возвращает дескриптор cURL, который можно использовать с другими функциями cURL.
      curl_setopt(): Устанавливает параметр для сеанса cURL.
      curl_exec(): Выполняет сеанс cURL, обрабатывает все данные и возвращает результаты.
      curl_getinfo(): Возвращает информацию о последнем выполненном запросе.
      curl_error(): Возвращает строку, содержащую последнюю ошибку для текущего сеанса.
      curl_close(): Завершает сеанс cURL и освобождает все ресурсы.
      Эти функции используются вместе для создания, настройки, выполнения и завершения запросов cURL.
      
      56. Дайте определение понятию CURL. Опишите базовую структуру. Назовите этапы создания и использования запросов.
      CURL (Client URL) — это кроссплатформенная служебная программа командной строки, позволяющая взаимодействовать с множеством различных серверов по множеству различных протоколов с синтаксисом URL. Она поддерживает работу с протоколами: HTTP, HTTPS, FTP, FTPS, IMAP, POP3, SMTP и другими. Название расшифровывается как "client for URL".
      Базовая структура CURL включает в себя следующие компоненты:
      libcurl: Это библиотека, на которой работает CURL. Она предоставляет API для передачи данных с сервера и на сервер при помощи различных протоколов.
      CURL command-line tool: Это инструмент командной строки, который использует libcurl для выполнения операций передачи данных.
      Этапы создания и использования запросов CURL включают:
      Инициализация сеанса CURL: Используйте функцию curl_init() для инициализации нового сеанса CURL.
      Установка URL-адреса: Используйте функцию curl_setopt() для установки URL-адреса, на который будет выполнен запрос.
      Установка дополнительных параметров запроса: Если необходимо, вы можете использовать функцию curl_setopt() для установки дополнительных параметров запроса, таких как заголовки.
      Выполнение запроса: Используйте функцию curl_exec() для выполнения запроса.
      Завершение сеанса: После выполнения запроса, используйте функцию curl_close() для завершения сеанса CURL.
      
      57. Дайте определение понятию CURL. Назовите используемые протоколы. Назовите варианты применения и их описание.
      CURL (Client URL) — это кроссплатформенная служебная программа командной строки, позволяющая взаимодействовать с множеством различных серверов по множеству различных протоколов с синтаксисом URL. Название расшифровывается как "client for URL".
      CURL поддерживает следующие протоколы:
      HTTP и HTTPS
      FTP и FTPS
      IMAP и IMAPS
      POP3 и POP3S
      SMB и SMBS
      SFTP
      SCP
      TELNET
      GOPHER
      LDAP и LDAPS
      SMTP и SMTPS
      DICT
      TFTP
      RTMP
      RTSP
      Варианты применения CURL включают:
      Взаимодействие с веб-сайтом или API: CURL идеально подходит для отправки запросов и получения ответов на терминал или с выводом в файл6. Он может быть использован как часть сложного скрипта для передачи полученных данных другим функциям на дальнейшую обработку.
      Скачивание и загрузка файлов на сервер: CURL поддерживает более 20 протоколов, что позволяет скачивать и загружать файлы на сервер.
      Отслеживание редиректа (переадресации): Если на сайте есть редирект на другую ссылку, CURL может отслеживать эту переадресацию.
      Остановка и продолжение скачивания: Если во время закачки файла что-то пошло не так или же качаете большой файл, но ввиду каких-то причин не хотите делать это за одну сессию, CURL предоставляет возможность остановки и продолжения закачки.
      
      58. Дайте определение понятию сценарии PHP. Объясните суть использование простых сценариев. Назовите методы создания сценариев.
      Сценарий PHP — это последовательность инструкций, написанных на языке программирования PHP, которые выполняются на сервере. Сценарии PHP обычно используются для создания динамических веб-страниц, которые могут изменяться в зависимости от различных факторов, таких как ввод пользователя.
      Простые сценарии PHP обычно включают в себя базовые операции, такие как вывод данных, работа с переменными, использование условных операторов и циклов. Они могут быть внедрены непосредственно в код HTML, что позволяет создавать динамические веб-страницы.
      Создание сценариев PHP обычно включает следующие шаги:
      Создание файла PHP: Создайте новый файл с расширением .php, который будет содержать ваш сценарий.
      Написание кода PHP: Внутри файла PHP напишите код PHP, который будет выполняться на сервере. Код PHP должен быть заключен в специальные теги <?php и ?>.
      Тестирование сценария PHP: Загрузите файл PHP на сервер и откройте его в веб-браузере для тестирования.
      Важно отметить, что для выполнения сценариев PHP на сервере должен быть установлен интерпретатор PHP.
      
      59. Объясните суть использования PHP сценариев в HTML-документе. Объясните суть использования сценариев при работе с БД.
      Использование PHP сценариев в HTML-документе позволяет создавать динамические веб-страницы. PHP может быть встроен в код HTML, и сервер интерпретирует код PHP и выводит результаты в виде кода HTML в веб-браузеры. Вы можете создавать файлы PHP без каких-либо тегов HTML, и это называется Pure PHP file. PHP может выводить изображения, PDF-файлы и даже клипы Flash, генерируемые на лету.
      Использование сценариев PHP при работе с БД позволяет взаимодействовать с базой данных для выполнения различных операций, таких как чтение, запись, обновление и удаление данных. Типичный процесс работы с СУБД в PHP-сценарии состоит из нескольких шагов:
      Установить подключение к серверу СУБД, передав необходимые параметры: адрес, логин, пароль.
      Убедиться, что подключение прошло успешно: сервер СУБД доступен, логин и пароль верные и так далее.
      Сформировать правильный SQL запрос (например, на чтение данных из таблицы)5.
      Убедиться, что запрос был выполнен успешно.
      Получить результат от СУБД в виде массива из записей.
      Использовать полученные записи в своём сценарии (например, показать их в виде таблицы).
      PHP поддерживает работу с базой данных MySQL. Специальные встроенные функции для работы с MySQL позволяют просто и эффективно работать с этой СУБД: выполнять любые запросы, читать и записывать данные, обрабатывать ошибки.
      
      60. Дайте определение понятию AJAX. Опишите способы организации взаимодействия с сервером посредством технологии AJAX. Назовите методы AJAX.
      AJAX - это аббревиатура от Asynchronous JavaScript And XML. Это набор техник веб-разработки, которые позволяют веб-приложениям работать асинхронно, обрабатывая любые запросы к серверу в фоновом режиме. Это означает, что можно обновлять части веб-страницы, не перезагружая всю страницу.
      Для организации взаимодействия с сервером посредством технологии AJAX можно использовать следующие способы:
      Объект XMLHttpRequest - это встроенный объект браузера, который позволяет отправлять и получать данные от веб-сервера. Для этого нужно создать экземпляр объекта, установить обработчик события onreadystatechange, который будет вызываться при изменении состояния запроса, и вызвать методы open и send, указав параметры запроса.
      Fetch API - это современный интерфейс, который также позволяет выполнять асинхронные запросы к веб-серверу. Для этого нужно использовать глобальную функцию fetch, которая принимает URL-адрес или объект Request в качестве аргумента и возвращает объект Promise, который можно обрабатывать с помощью методов then и catch.
      Методы AJAX - это функции, которые используются для выполнения запросов к веб-серверу с помощью технологии AJAX. Некоторые из них:
      
      GET - метод, который используется для получения данных от веб-сервера. Этот метод передает параметры запроса в виде строки, добавленной к URL-адресу.
      POST - метод, который используется для отправки данных на веб-сервер. Этот метод передает параметры запроса в теле запроса.
      PUT - метод, который используется для обновления данных на веб-сервере. Этот метод также передает параметры запроса в теле запроса.
      DELETE - метод, который используется для удаления данных с веб-сервера. Этот метод не передает параметры запроса.
